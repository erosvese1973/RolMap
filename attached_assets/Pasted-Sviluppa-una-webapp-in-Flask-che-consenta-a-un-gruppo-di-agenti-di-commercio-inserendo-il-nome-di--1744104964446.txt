Sviluppa una webapp in Flask che consenta a un gruppo di agenti di commercio (inserendo il nome) di selezionare i Comuni italiani in cui operano in esclusiva.

La UI deve prevedere 3 filtri concatenati:

Regione → Provincia → Comune

Usa dati reali italiani e caricali da file CSV ISTAT ufficiali:

elenco_comuni.csv con codici, nomi, province, regioni (fonte: ISTAT)

Organizza il caricamento dei dati su server all'avvio (ad es. tramite pandas)

Dopo la selezione dei Comuni e del nome agente:

Effettua una richiesta WFS (GeoServer) a un MCP Server remoto esistente (es. https://mio-geoserver.com/geoserver/wfs), per recuperare i poligoni dei comuni selezionati in formato GeoJSON.

Visualizza i poligoni su Google Maps usando map.data.addGeoJson().

Specifiche tecniche:

Niente dati di esempio o dummy: solo dati reali dal CSV

UI semplice ma compatibile con anteprima WYSIWYG di Windsurf

Template HTML separati (templates/index.html, templates/mappa.html)

Usa Flask con routing pulito, facile da modificare

La mappa deve essere centrata dinamicamente sull’area dei comuni selezionati

Google Maps richiede chiave API (da lasciare come placeholder)

Funzionalità extra opzionali:

Mostrare nome dell’agente sulla mappa

Colorare ogni comune in modo uniforme (es. arancione trasparente)

Supporto per selezione multipla Comuni

Output richiesto:

Struttura di progetto pronta (Python Flask + HTML + JS)

Nessuna simulazione, tutto reale e collegabile a un GeoServer funzionante

## Memorizzazione agenti e comuni assegnati

Implementare un sistema di persistenza per:
1. Registrare gli agenti con:
   - Nome agente (univoco)
   - Data/ora registrazione
   - Lista comuni assegnati (codici ISTAT)

2. Opzioni di storage:
   - Database SQLite integrato (consigliato per semplicità)
   - Oppure file JSON con struttura:
     ```json
     {
       "agenti": [
         {
           "nome": "NomeAgente",
           "data_registrazione": "YYYY-MM-DD HH:MM:SS",
           "comuni": ["001234", "005678"]
         }
       ]
     }
     ```

3. Funzionalità da implementare:
   - Aggiunta nuovo agente con comuni
   - Verifica esistenza agente
   - Recupero comuni assegnati a un agente
   - Modifica/rimozione assegnazioni

4. Sicurezza:
   - Validazione input (es. codici ISTAT validi)
   - Prevenzione duplicati
   - Backup automatico dati